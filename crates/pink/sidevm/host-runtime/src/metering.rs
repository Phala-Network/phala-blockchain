use std::sync::Arc;
use wasmer::{wasmparser::Operator, CompilerConfig};
use wasmer_middlewares::metering::Metering;

pub(crate) fn metering<C: CompilerConfig>(mut compiler: C) -> C {
    compiler.push_middleware(Arc::new(Metering::new(u64::MAX, cost_function)));
    compiler
}

fn cost_function(operator: &Operator) -> u64 {
    use Operator::*;

    let cost = match operator {
        I64Const { .. } => 2960,
        I64Load { .. } => 7280,
        I64Store { .. } => 8360,
        Select { .. } => 5980,
        If { .. } => 9990,
        Br { .. } => 3060,
        BrIf { .. } => 5770,
        BrTable { .. } => 7170,
        Call { .. } => 68540,
        CallIndirect { .. } => 85180,
        LocalGet { .. } => 3050,
        LocalSet { .. } => 3900,
        LocalTee { .. } => 3030,
        GlobalGet { .. } => 9050,
        GlobalSet { .. } => 11140,
        MemorySize { .. } => 3640,
        MemoryGrow { .. } => 3640,
        I64Clz => 3140,
        I64Ctz => 3040,
        I64Popcnt => 2970,
        I64Eqz => 3160,
        I64ExtendI32S => 2890,
        I64ExtendI32U => 2830,
        I32WrapI64 => 3140,
        I64Eq => 4740,
        I64Ne => 4720,
        I64LtS => 4680,
        I64LtU => 4690,
        I64GtS => 4720,
        I64GtU => 4840,
        I64LeS => 4730,
        I64LeU => 4710,
        I64GeS => 4660,
        I64GeU => 4690,
        I64Add => 4450,
        I64Sub => 4520,
        I64Mul => 4520,
        I64DivS => 11070,
        I64DivU => 11620,
        I64RemS => 11090,
        I64RemU => 11730,
        I64And => 4500,
        I64Or => 4480,
        I64Xor => 4570,
        I64Shl => 4740,
        I64ShrS => 4680,
        I64ShrU => 4700,
        I64Rotl => 4690,
        I64Rotr => 4700,
        F64Const { .. } => 2960,
        F64Load { .. } => 7280,
        F64Store { .. } => 8360,
        F64ConvertI32S => 4700,
        F64ConvertI32U => 4700,
        F64ConvertI64S => 4700,
        F64ConvertI64U => 4700,
        Unreachable => 0,
        Nop => 100,
        Block { .. } => 100,
        Loop { .. } => 100,
        Else => 100,
        Try { .. } => 100,
        Catch { .. } => 1000,
        Throw { .. } => 10000,
        Rethrow { .. } => 10000,
        End => 100,
        Return => 1000,
        ReturnCall { .. } => 1000,
        ReturnCallIndirect { .. } => 2000,
        Delegate { .. } => 1000,
        CatchAll => 1000,
        Drop => 100,
        TypedSelect { .. } => 5000,
        I32Load { .. } => 3000,
        F32Load { .. } => 3000,
        I32Load8S { .. } => 3000,
        I32Load8U { .. } => 3000,
        I32Load16S { .. } => 3000,
        I32Load16U { .. } => 3000,
        I64Load8S { .. } => 6000,
        I64Load8U { .. } => 6000,
        I64Load16S { .. } => 6000,
        I64Load16U { .. } => 6000,
        I64Load32S { .. } => 6000,
        I64Load32U { .. } => 6000,
        I32Store { .. } => 3000,
        F32Store { .. } => 3000,
        I32Store8 { .. } => 3000,
        I32Store16 { .. } => 3000,
        I64Store8 { .. } => 6000,
        I64Store16 { .. } => 6000,
        I64Store32 { .. } => 6000,
        I32Const { .. } => 2000,
        F32Const { .. } => 2000,
        RefNull { .. } => 1000,
        RefIsNull => 1000,
        RefFunc { .. } => 2000,
        I32Eqz => 2000,
        I32Eq => 2000,
        I32Ne => 2000,
        I32LtS => 2000,
        I32LtU => 2000,
        I32GtS => 2000,
        I32GtU => 2000,
        I32LeS => 2000,
        I32LeU => 2000,
        I32GeS => 2000,
        I32GeU => 2000,
        F32Eq => 2000,
        F32Ne => 2000,
        F32Lt => 2000,
        F32Gt => 2000,
        F32Le => 2000,
        F32Ge => 2000,
        F64Eq => 2000,
        F64Ne => 2000,
        F64Lt => 2000,
        F64Gt => 2000,
        F64Le => 2000,
        F64Ge => 2000,
        I32Clz => 2000,
        I32Ctz => 2000,
        I32Popcnt => 2000,
        I32Add => 2000,
        I32Sub => 2000,
        I32Mul => 2000,
        I32DivS => 2000,
        I32DivU => 2000,
        I32RemS => 2000,
        I32RemU => 2000,
        I32And => 2000,
        I32Or => 2000,
        I32Xor => 2000,
        I32Shl => 2000,
        I32ShrS => 2000,
        I32ShrU => 2000,
        I32Rotl => 2000,
        I32Rotr => 2000,
        F32Abs => 2000,
        F32Neg => 2000,
        F32Ceil => 2000,
        F32Floor => 2000,
        F32Trunc => 2000,
        F32Nearest => 2000,
        F32Sqrt => 2000,
        F32Add => 2000,
        F32Sub => 2000,
        F32Mul => 2000,
        F32Div => 2000,
        F32Min => 2000,
        F32Max => 2000,
        F32Copysign => 2000,
        F64Abs => 2000,
        F64Neg => 2000,
        F64Ceil => 2000,
        F64Floor => 2000,
        F64Trunc => 2000,
        F64Nearest => 2000,
        F64Sqrt => 2000,
        F64Add => 2000,
        F64Sub => 2000,
        F64Mul => 2000,
        F64Div => 2000,
        F64Min => 2000,
        F64Max => 2000,
        F64Copysign => 2000,
        I32TruncF32S => 2000,
        I32TruncF32U => 2000,
        I32TruncF64S => 2000,
        I32TruncF64U => 2000,
        I64TruncF32S => 2000,
        I64TruncF32U => 2000,
        I64TruncF64S => 2000,
        I64TruncF64U => 2000,
        F32ConvertI32S => 2000,
        F32ConvertI32U => 2000,
        F32ConvertI64S => 2000,
        F32ConvertI64U => 2000,
        F32DemoteF64 => 2000,
        F64PromoteF32 => 2000,
        I32ReinterpretF32 => 2000,
        I64ReinterpretF64 => 2000,
        F32ReinterpretI32 => 2000,
        F64ReinterpretI64 => 2000,
        I32Extend8S => 2000,
        I32Extend16S => 2000,
        I64Extend8S => 2000,
        I64Extend16S => 2000,
        I64Extend32S => 2000,
        I32TruncSatF32S => 2000,
        I32TruncSatF32U => 2000,
        I32TruncSatF64S => 2000,
        I32TruncSatF64U => 2000,
        I64TruncSatF32S => 2000,
        I64TruncSatF32U => 2000,
        I64TruncSatF64S => 2000,
        I64TruncSatF64U => 2000,
        MemoryInit { .. } => 20000,
        DataDrop { .. } => 2000,
        MemoryCopy { .. } => 20000,
        MemoryFill { .. } => 20000,
        TableInit { .. } => 20000,
        ElemDrop { .. } => 1000,
        TableCopy { .. } => 20000,
        TableFill { .. } => 20000,
        TableGet { .. } => 20000,
        TableSet { .. } => 20000,
        TableGrow { .. } => 20000,
        TableSize { .. } => 2000,
        MemoryAtomicNotify { .. } => 8000,
        MemoryAtomicWait32 { .. } => 8000,
        MemoryAtomicWait64 { .. } => 8000,
        AtomicFence { .. } => 1000,
        _ => 100000,
    };
    1.max(cost / 100)
}
