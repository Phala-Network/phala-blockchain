enclave {
    from "sgx_backtrace.edl" import *;
    from "sgx_tstd.edl" import *;
    from "sgx_stdio.edl" import *;
    from "sgx_fs.edl" import *;
    from "sgx_net.edl" import *;
    from "sgx_time.edl" import *;
    from "sgx_tstdc.edl" import *;
    from "sgx_env.edl" import *;
    from "sgx_tprotected_fs.edl" import *;
    from "sgx_pthread.edl" import *;
    from "sgx_thread.edl" import *;

    include "sgx_quote.h"

    struct timespec_ {
        int64_t tv_sec;
        long tv_nsec;
    };

    struct itimerspec_ {
        struct timespec it_interval;
        struct timespec it_value;
    };

    trusted {
        /* define ECALLs here. */

        public sgx_status_t ecall_handle(
            uint8_t action,
            [in, size = input_len] uint8_t *input_ptr, size_t input_len,
            [out, size = output_buf_len] uint8_t *output_ptr,
            [out] size_t *output_len_ptr, size_t output_buf_len
        );

        public sgx_status_t ecall_prpc_request(
            [in, size = path_len] uint8_t *path, size_t path_len,
            [in, size = data_len] uint8_t *data, size_t data_len,
            [out] uint16_t *status_code,
            [out, size = output_buf_len] uint8_t *output_ptr, size_t output_buf_len,
            [out] size_t *output_len_ptr
        );

        public sgx_status_t ecall_init(
            [in, size = args_len] uint8_t *args, size_t args_len
        );

        public sgx_status_t ecall_bench_run(uint32_t index);
    };

    untrusted {
        sgx_status_t ocall_load_ias_spid(
            [out, size = key_buf_len] uint8_t *key_ptr,
            [out] size_t *key_len_ptr, size_t key_buf_len
        );

        sgx_status_t ocall_load_ias_key(
            [out, size = key_buf_len] uint8_t *key_ptr,
            [out] size_t *key_len_ptr, size_t key_buf_len
        );

        sgx_status_t ocall_sgx_init_quote(
            [out] sgx_target_info_t *ret_ti,
            [out] sgx_epid_group_id_t *ret_gid
        );

        sgx_status_t ocall_get_quote(
            [in, size = sigrl_len] uint8_t * p_sigrl,
            uint32_t sigrl_len,
            [in] sgx_report_t *report,
            sgx_quote_sign_type_t quote_type,
            [in] sgx_spid_t *p_spid,
            [in] sgx_quote_nonce_t *p_nonce,
            [out] sgx_report_t *p_qe_report,
            [out, size = maxlen] sgx_quote_t *p_quote,
            uint32_t maxlen,
            [out] uint32_t* p_quote_len
        );

        sgx_status_t ocall_get_update_info(
            [in] sgx_platform_info_t * platformBlob,
            int32_t enclaveTrusted,
            [out] sgx_update_info_bit_t * update_info
        );

        int ocall_eventfd(
            [out] int *errno_,
            unsigned int init,
            int flags
        );

        int ocall_timerfd_create(
            [out] int *errno_,
            int clockid,
            int flags
        );

        int ocall_timerfd_settime(
            [out] int *errno_,
            int fd,
            int flags,
            [in] struct itimerspec_ *new_value,
            [out] struct itimerspec_ *old_value
        );

        int ocall_timerfd_gettime(
            [out] int *errno_,
            int fd,
            [out] struct itimerspec_ *curr_value
        );
    };
};
